// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  name      String
  password  String
  type      UserType @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id             Int      @id @default(autoincrement())
  name           String
  login          String
  cpf            String
  dateOfBirth    String
  email          String
  primaryPhone   String
  secondaryPhone String
  state          String
  city           String
  tags           Tag[]    @relation("ClientTag") // Cria uma nova tabela de relacionamento N:N
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Companion {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  email       String
  dateOfBirth String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String
  clients   Client[] @relation("ClientTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          Int      @id @default(autoincrement())
  name        String
  state       String
  city        String
  observation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Saller {
  id          Int      @id @default(autoincrement())
  name        String
  login       String   @unique
  email       String   @unique
  phone       String
  cpf         String
  rg          String
  observation String?
  pix         String
  photo       Bytes?
  state       String
  city        String
  adress      String
  number      String
  complement  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Hosting {
  id          Int      @id @default(autoincrement())
  name        String
  state       String
  city        String
  observation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TourOperator {
  id                   Int      @id @default(autoincrement())
  name                 String
  phone                String
  contact              String
  email                String   @unique
  site                 String
  login                String   @unique
  password             String
  upfrontComission     Float
  installmentComission Float
  observation          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum UserType {
  ADMIN
  USER
}
